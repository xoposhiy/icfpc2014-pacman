using NUnit.Framework;

namespace Lib
{
	public class LValue_Tests
	{
		[Test]
		public void ParseLValue()
		{
			const string world =
				"(((0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, 0))))))))))))))))))))))), ((0, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (0, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (0, 0))))))))))))))))))))))), ((0, (2, (0, (0, (0, (2, (0, (0, (0, (0, (2, (0, (2, (0, (0, (0, (0, (2, (0, (0, (0, (2, (0, 0))))))))))))))))))))))), ((0, (3, (0, (0, (0, (2, (0, (0, (0, (0, (2, (0, (2, (0, (0, (0, (0, (2, (0, (0, (0, (3, (0, 0))))))))))))))))))))))), ((0, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (0, 0))))))))))))))))))))))), ((0, (2, (0, (0, (0, (2, (0, (2, (0, (0, (0, (0, (0, (0, (0, (2, (0, (2, (0, (0, (0, (2, (0, 0))))))))))))))))))))))), ((0, (2, (2, (2, (2, (2, (0, (2, (2, (2, (2, (0, (2, (2, (2, (2, (0, (2, (2, (2, (2, (2, (0, 0))))))))))))))))))))))), ((0, (0, (0, (0, (0, (2, (0, (0, (0, (0, (1, (0, (1, (0, (0, (0, (0, (2, (0, (0, (0, (0, (0, 0))))))))))))))))))))))), ((0, (1, (1, (1, (0, (2, (0, (1, (1, (1, (1, (6, (1, (1, (1, (1, (0, (2, (0, (1, (1, (1, (0, 0))))))))))))))))))))))), ((0, (0, (0, (0, (0, (2, (0, (1, (0, (0, (0, (1, (0, (0, (0, (1, (0, (2, (0, (0, (0, (0, (0, 0))))))))))))))))))))))), ((0, (1, (1, (1, (1, (2, (1, (1, (0, (1, (6, (6, (6, (1, (0, (1, (1, (2, (1, (1, (1, (1, (0, 0))))))))))))))))))))))), ((0, (0, (0, (0, (0, (2, (0, (1, (0, (0, (0, (0, (0, (0, (0, (1, (0, (2, (0, (0, (0, (0, (0, 0))))))))))))))))))))))), ((0, (1, (1, (1, (0, (2, (0, (1, (1, (1, (1, (4, (1, (1, (1, (1, (0, (2, (0, (1, (1, (1, (0, 0))))))))))))))))))))))), ((0, (0, (0, (0, (0, (2, (0, (1, (0, (0, (0, (0, (0, (0, (0, (1, (0, (2, (0, (0, (0, (0, (0, 0))))))))))))))))))))))), ((0, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (0, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (0, 0))))))))))))))))))))))), ((0, (2, (0, (0, (0, (2, (0, (0, (0, (0, (2, (0, (2, (0, (0, (0, (0, (2, (0, (0, (0, (2, (0, 0))))))))))))))))))))))), ((0, (3, (2, (2, (0, (2, (2, (2, (2, (2, (2, (5, (2, (2, (2, (2, (2, (2, (0, (2, (2, (3, (0, 0))))))))))))))))))))))), ((0, (0, (0, (2, (0, (2, (0, (2, (0, (0, (0, (0, (0, (0, (0, (2, (0, (2, (0, (2, (0, (0, (0, 0))))))))))))))))))))))), ((0, (2, (2, (2, (2, (2, (0, (2, (2, (2, (2, (0, (2, (2, (2, (2, (0, (2, (2, (2, (2, (2, (0, 0))))))))))))))))))))))), ((0, (2, (0, (0, (0, (0, (0, (0, (0, (0, (2, (0, (2, (0, (0, (0, (0, (0, (0, (0, (0, (2, (0, 0))))))))))))))))))))))), ((0, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (0, 0))))))))))))))))))))))), ((0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, 0))))))))))))))))))))))), 0)))))))))))))))))))))), ((0, ((11, 16), (2, (3, 0)))), (((0, ((11, 8), 2)), ((0, ((10, 10), 2)), ((0, ((11, 10), 2)), ((0, ((12, 10), 2)), 0)))), 0)))";
			string s = LValue.Parse(world).ToString();
			Assert.AreEqual(world, s);
		}
	}
}